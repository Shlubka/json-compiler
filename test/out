Processing node: kind=source_file, text=fn main() -> i32 {
    let gg = 0;

    if (condition1) {
        statement1;
        if (condition2) {
            statement2;
            if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
        } else if (condition6) {
            statement6;
        } else {
            statement7;
        }
    } else if (condition8) {
        statement8;
    } else {
        statement9;
    }

    /*for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }

    loop {
        println!("loop");
    }

    while i < 10 {
        println!("{i}");
        i += 1;
    }
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
    return 1;*/
}

Processing node: kind=function_item, text=fn main() -> i32 {
    let gg = 0;

    if (condition1) {
        statement1;
        if (condition2) {
            statement2;
            if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
        } else if (condition6) {
            statement6;
        } else {
            statement7;
        }
    } else if (condition8) {
        statement8;
    } else {
        statement9;
    }

    /*for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }

    loop {
        println!("loop");
    }

    while i < 10 {
        println!("{i}");
        i += 1;
    }
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
    return 1;*/
}
Processing node: kind=fn, text=fn
Processing node: kind=identifier, text=main
4
push fn
Processing node: kind=parameters, text=()
Processing node: kind=->, text=->
Processing node: kind=primitive_type, text=i32
Processing node: kind=block, text={
    let gg = 0;

    if (condition1) {
        statement1;
        if (condition2) {
            statement2;
            if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
        } else if (condition6) {
            statement6;
        } else {
            statement7;
        }
    } else if (condition8) {
        statement8;
    } else {
        statement9;
    }

    /*for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }

    loop {
        println!("loop");
    }

    while i < 10 {
        println!("{i}");
        i += 1;
    }
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
    return 1;*/
}
Processing node: kind={, text={
Processing node: kind=let_declaration, text=let gg = 0;
Processing node: kind=expression_statement, text=if (condition1) {
        statement1;
        if (condition2) {
            statement2;
            if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
        } else if (condition6) {
            statement6;
        } else {
            statement7;
        }
    } else if (condition8) {
        statement8;
    } else {
        statement9;
    }
Processing node: kind=if_expression, text=if (condition1) {
        statement1;
        if (condition2) {
            statement2;
            if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
        } else if (condition6) {
            statement6;
        } else {
            statement7;
        }
    } else if (condition8) {
        statement8;
    } else {
        statement9;
    }
push if
Processing node: kind=expression_statement, text=statement1;
Processing node: kind=identifier, text=statement1
10
push fn
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=if (condition2) {
            statement2;
            if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
        } else if (condition6) {
            statement6;
        } else {
            statement7;
        }
Processing node: kind=if_expression, text=if (condition2) {
            statement2;
            if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
        } else if (condition6) {
            statement6;
        } else {
            statement7;
        }
push if
Processing node: kind=expression_statement, text=statement2;
Processing node: kind=identifier, text=statement2
10
push fn
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
Processing node: kind=if_expression, text=if (condition3) {
                statement3;
            } else if (condition4) {
                statement4;
            } else {
                statement5;
            }
push if
Processing node: kind=expression_statement, text=statement3;
Processing node: kind=identifier, text=statement3
10
push fn
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 7
Handling Func block
Processing node: kind=else_clause, text=else if (condition4) {
                statement4;
            } else {
                statement5;
            }
mr penis
Processing node: kind=else, text=else
Processing node: kind=if_expression, text=if (condition4) {
                statement4;
            } else {
                statement5;
            }
push if
Processing node: kind=expression_statement, text=statement4;
Processing node: kind=identifier, text=statement4
10
push fn
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 9
Handling Func block
Processing node: kind=else_clause, text=else {
                statement5;
            }
mr penis
Processing node: kind=else, text=else
Processing node: kind=block, text={
                statement5;
            }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=statement5;
Processing node: kind=identifier, text=statement5
10
push fn
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 10
Handling Func block
Processing node: kind=}, text=}
len of block mass = 9
Processing node: kind=else_clause, text=else if (condition6) {
            statement6;
        } else {
            statement7;
        }
mr penis
Processing node: kind=else, text=else
Processing node: kind=if_expression, text=if (condition6) {
            statement6;
        } else {
            statement7;
        }
push if
Processing node: kind=expression_statement, text=statement6;
Processing node: kind=identifier, text=statement6
10
push fn
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 12
Handling Func block
Processing node: kind=else_clause, text=else {
            statement7;
        }
mr penis
Processing node: kind=else, text=else
Processing node: kind=block, text={
            statement7;
        }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=statement7;
Processing node: kind=identifier, text=statement7
10
push fn
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 13
Handling Func block
Processing node: kind=}, text=}
len of block mass = 12
Processing node: kind=else_clause, text=else if (condition8) {
        statement8;
    } else {
        statement9;
    }
mr penis
Processing node: kind=else, text=else
Processing node: kind=if_expression, text=if (condition8) {
        statement8;
    } else {
        statement9;
    }
push if
Processing node: kind=expression_statement, text=statement8;
Processing node: kind=identifier, text=statement8
10
push fn
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 15
Handling Func block
Processing node: kind=else_clause, text=else {
        statement9;
    }
mr penis
Processing node: kind=else, text=else
Processing node: kind=block, text={
        statement9;
    }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=statement9;
Processing node: kind=identifier, text=statement9
10
push fn
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 16
Handling Func block
Processing node: kind=block_comment, text=/*for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }

    loop {
        println!("loop");
    }

    while i < 10 {
        println!("{i}");
        i += 1;
    }
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
    return 1;*/
Processing node: kind=}, text=}
len of block mass = 15
coords: x=0; y=0
coords: x=100; y=100
coords: x=100; y=200
coords: x=200; y=300
coords: x=200; y=400
coords: x=300; y=500
coords: x=300; y=600
coords: x=300; y=700
coords: x=200; y=800
coords: x=200; y=900
coords: x=300; y=1000
coords: x=300; y=1100
coords: x=300; y=1200
coords: x=200; y=1300
coords: x=200; y=1400
coords: x=200; y=1500
coords: x=200; y=1600
coords: x=200; y=1700
coords: x=100; y=1800
coords: x=100; y=1900
coords: x=200; y=2000
coords: x=200; y=2100
coords: x=200; y=2200
coords: x=100; y=2300
coords: x=100; y=2400
coords: x=100; y=2500
coords: x=100; y=2600
coords: x=100; y=2700
coords: x=0; y=2800
coords: x=0; y=2900
coords: x=100; y=3000
coords: x=100; y=3100
coords: x=100; y=3200
coords: x=0; y=3300
coords: x=0; y=3400
coords: x=0; y=3500
coords: x=0; y=3600
coords: x=0; y=3700
