Processing node: kind=source_file, text=fn match_test() {
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }
}

/*
fn goyda() -> bool {
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
        } else {
            println!("statement3");
        }
    } else if condition8 {
        println!("statement4");
    } else {
        println!("statement5");
    }

    return true;
}

fn main() -> i32 {
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        if condition1 {
            println!("statement1");
            if condition2 {
                println!("statement6");
            } else {
                println!("statement7");
            }
        } else if condition8 {
            println!("statement8");
        } else {
            println!("statement9");
        }
        break; // Добавлено для предотвращения бесконечного цикла
    }


    return 1;
}
*/

Processing node: kind=function_item, text=fn match_test() {
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }
}
Processing node: kind=fn, text=fn
Processing node: kind=identifier, text=match_test
10
push fn
Processing node: kind=parameters, text=()
Processing node: kind=block, text={
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }
}
Processing node: kind={, text={
Processing node: kind=expression_statement, text=match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }
Processing node: kind=match_expression, text=match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }
push match
Processing node: kind=match, text=match
Processing node: kind=identifier, text=gg
Processing node: kind=match_block, text={
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }
Processing node: kind={, text={
Processing node: kind=match_arm, text=1 => println!("1"),
Processing node: kind=match_pattern, text=1
Processing node: kind=integer_literal, text=1
Processing node: kind==>, text==>
Processing node: kind=macro_invocation, text=println!("1")
Processing node: kind=,, text=,
Processing node: kind=match_arm, text=2 => println!("2"),
Processing node: kind=match_pattern, text=2
Processing node: kind=integer_literal, text=2
Processing node: kind==>, text==>
Processing node: kind=macro_invocation, text=println!("2")
Processing node: kind=,, text=,
Processing node: kind=match_arm, text=3 => println!("3"),
Processing node: kind=match_pattern, text=3
Processing node: kind=integer_literal, text=3
Processing node: kind==>, text==>
Processing node: kind=macro_invocation, text=println!("3")
Processing node: kind=,, text=,
Processing node: kind=match_arm, text=4 => println!("4"),
Processing node: kind=match_pattern, text=4
Processing node: kind=integer_literal, text=4
Processing node: kind==>, text==>
Processing node: kind=macro_invocation, text=println!("4")
Processing node: kind=,, text=,
Processing node: kind=match_arm, text=5 => println!("5"),
Processing node: kind=match_pattern, text=5
Processing node: kind=integer_literal, text=5
Processing node: kind==>, text==>
Processing node: kind=macro_invocation, text=println!("5")
Processing node: kind=,, text=,
Processing node: kind=match_arm, text=_ => println!("other"),
Processing node: kind=match_pattern, text=_
Processing node: kind=_, text=_
Processing node: kind==>, text==>
Processing node: kind=macro_invocation, text=println!("other")
Processing node: kind=,, text=,
Processing node: kind=}, text=}
len of block mass = 1
Handling Func block
Processing node: kind=}, text=}
len of block mass = 0
Handling Func block
Processing node: kind=block_comment, text=/*
fn goyda() -> bool {
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
        } else {
            println!("statement3");
        }
    } else if condition8 {
        println!("statement4");
    } else {
        println!("statement5");
    }

    return true;
}

fn main() -> i32 {
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        if condition1 {
            println!("statement1");
            if condition2 {
                println!("statement6");
            } else {
                println!("statement7");
            }
        } else if condition8 {
            println!("statement8");
        } else {
            println!("statement9");
        }
        break; // Добавлено для предотвращения бесконечного цикла
    }


    return 1;
}
*/
coords: x=0; y=0
coords: x=0; y=100
coords: x=0; y=300
coords: x=0; y=400
coords: x=0; y=500
coords: x=0; y=600
coords: x=0; y=700
coords: x=0; y=800
coords: x=0; y=900
coords: x=0; y=1000
coords: x=0; y=1100
coords: x=0; y=1200
coords: x=0; y=1300
coords: x=0; y=1400
coords: x=0; y=1500
coords: x=0; y=1600
coords: x=0; y=1700
coords: x=0; y=1800
coords: x=0; y=1900
coords: x=0; y=2000
coords: x=0; y=2100
coords: x=0; y=2200
coords: x=0; y=2300
coords: x=0; y=2400
coords: x=0; y=2500
coords: x=0; y=2600
coords: x=0; y=2700
coords: x=0; y=2800
coords: x=0; y=2900
coords: x=0; y=3000
coords: x=0; y=3100
coords: x=0; y=3200
coords: x=0; y=3300
coords: x=0; y=3400
coords: x=0; y=3500
coords: x=0; y=3600
coords: x=0; y=3700
coords: x=0; y=3800
coords: x=0; y=3900
coords: x=0; y=4000
coords: x=0; y=4100
coords: x=0; y=4200
