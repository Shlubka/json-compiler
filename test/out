Processing node: kind=source_file, text=fn main() -> i32 {
    let gg = 0;
    for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }

    loop {
        println!("loop");
    }

    while i < 10 {
        println!("{i}");
        i += 1;
    }
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
    return 1;
}

Processing node: kind=function_item, text=fn main() -> i32 {
    let gg = 0;
    for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }

    loop {
        println!("loop");
    }

    while i < 10 {
        println!("{i}");
        i += 1;
    }
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
    return 1;
}
Processing node: kind=fn, text=fn
Processing node: kind=identifier, text=main
4
push fn
Processing node: kind=parameters, text=()
Processing node: kind=->, text=->
Processing node: kind=primitive_type, text=i32
Processing node: kind=block, text={
    let gg = 0;
    for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }

    loop {
        println!("loop");
    }

    while i < 10 {
        println!("{i}");
        i += 1;
    }
    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
    return 1;
}
Processing node: kind={, text={
Processing node: kind=let_declaration, text=let gg = 0;
Processing node: kind=expression_statement, text=for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }
Processing node: kind=for_expression, text=for i in 1..10 {
        println!("all ok");

        for i in 1..10 {
            println!("all ok");
        }

        loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }

        while i < 10 {
            println!("{i}");
            i += 1;
        }
    }
push for
Processing node: kind=expression_statement, text=println!("all ok");
Processing node: kind=macro_invocation, text=println!("all ok")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=for i in 1..10 {
            println!("all ok");
        }
Processing node: kind=for_expression, text=for i in 1..10 {
            println!("all ok");
        }
push for
Processing node: kind=expression_statement, text=println!("all ok");
Processing node: kind=macro_invocation, text=println!("all ok")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 3
Handling For block at 0:300
Processing node: kind=expression_statement, text=loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }
Processing node: kind=loop_expression, text=loop {
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }
Processing node: kind=loop, text=loop
push loop
Processing node: kind=block, text={
            for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
        }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
Processing node: kind=for_expression, text=for i in 1..10 {
                println!("all ok");

                for i in 1..10 {
                    println!("all ok");
                }

                loop {
                    println!("loop");
                }

                while i < 10 {
                    println!("{i}");
                    i += 1;
                }
            }
push for
Processing node: kind=expression_statement, text=println!("all ok");
Processing node: kind=macro_invocation, text=println!("all ok")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=for i in 1..10 {
                    println!("all ok");
                }
Processing node: kind=for_expression, text=for i in 1..10 {
                    println!("all ok");
                }
push for
Processing node: kind=expression_statement, text=println!("all ok");
Processing node: kind=macro_invocation, text=println!("all ok")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
Handling For block at 0:900
Processing node: kind=expression_statement, text=loop {
                    println!("loop");
                }
Processing node: kind=loop_expression, text=loop {
                    println!("loop");
                }
Processing node: kind=loop, text=loop
push loop
Processing node: kind=block, text={
                    println!("loop");
                }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("loop");
Processing node: kind=macro_invocation, text=println!("loop")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
Handling Loop block at 0:1200
Processing node: kind=expression_statement, text=while i < 10 {
                    println!("{i}");
                    i += 1;
                }
Processing node: kind=while_expression, text=while i < 10 {
                    println!("{i}");
                    i += 1;
                }
Processing node: kind=expression_statement, text=println!("{i}");
Processing node: kind=macro_invocation, text=println!("{i}")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=i += 1;
Processing node: kind=compound_assignment_expr, text=i += 1
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
Handling While block at 0:1500
Processing node: kind=}, text=}
len of block mass = 4
Handling For block at 0:700
Processing node: kind=}, text=}
len of block mass = 3
Handling Loop block at 0:600
Processing node: kind=expression_statement, text=while i < 10 {
            println!("{i}");
            i += 1;
        }
Processing node: kind=while_expression, text=while i < 10 {
            println!("{i}");
            i += 1;
        }
Processing node: kind=expression_statement, text=println!("{i}");
Processing node: kind=macro_invocation, text=println!("{i}")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=i += 1;
Processing node: kind=compound_assignment_expr, text=i += 1
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 3
Handling While block at 0:2100
Processing node: kind=}, text=}
len of block mass = 2
Handling For block at 0:100
Processing node: kind=expression_statement, text=loop {
        println!("loop");
    }
Processing node: kind=loop_expression, text=loop {
        println!("loop");
    }
Processing node: kind=loop, text=loop
push loop
Processing node: kind=block, text={
        println!("loop");
    }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("loop");
Processing node: kind=macro_invocation, text=println!("loop")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 2
Handling Loop block at 0:2600
Processing node: kind=expression_statement, text=while i < 10 {
        println!("{i}");
        i += 1;
    }
Processing node: kind=while_expression, text=while i < 10 {
        println!("{i}");
        i += 1;
    }
Processing node: kind=expression_statement, text=println!("{i}");
Processing node: kind=macro_invocation, text=println!("{i}")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=i += 1;
Processing node: kind=compound_assignment_expr, text=i += 1
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 2
Handling While block at 0:2900
Processing node: kind=expression_statement, text=match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
Processing node: kind=match_expression, text=match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
        5 => println!("5"),
    }
push match
Processing node: kind=expression_statement, text=return 1;
Processing node: kind=return_expression, text=return 1
push return
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 1
skip
coords: x=0; y=0
coords: x=0; y=100
coords: x=0; y=200
coords: x=0; y=300
coords: x=0; y=400
coords: x=0; y=500
index: 3
coords: x=0; y=600
coords: x=0; y=700
coords: x=0; y=800
coords: x=0; y=900
coords: x=0; y=1000
coords: x=0; y=1100
index: 9
coords: x=0; y=1200
coords: x=0; y=1300
coords: x=0; y=1400
index: 12
coords: x=0; y=1500
coords: x=0; y=1600
coords: x=0; y=1700
coords: x=0; y=1800
index: 15
coords: x=0; y=1900
index: 7
coords: x=0; y=2000
index: 6
coords: x=0; y=2100
coords: x=0; y=2200
coords: x=0; y=2300
coords: x=0; y=2400
index: 21
coords: x=0; y=2500
index: 1
coords: x=0; y=2600
coords: x=0; y=2700
coords: x=0; y=2800
index: 26
coords: x=0; y=2900
coords: x=0; y=3000
coords: x=0; y=3100
coords: x=0; y=3200
index: 29
coords: x=0; y=3300
coords: x=0; y=3400
