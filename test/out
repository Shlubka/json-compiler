Processing node: kind=source_file, text=fn goyda() -> bool {
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }

    return true;
}

/*fn main() -> i32 {
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        println!("{}", gg);
        break; // Добавлено для предотвращения бесконечного цикла
    }

    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }

    return 1;
}*/

Processing node: kind=function_item, text=fn goyda() -> bool {
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }

    return true;
}
Processing node: kind=fn, text=fn
Processing node: kind=identifier, text=goyda
5
push fn
Processing node: kind=parameters, text=()
Processing node: kind=->, text=->
Processing node: kind=primitive_type, text=bool
Processing node: kind=block, text={
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }

    return true;
}
Processing node: kind={, text={
Processing node: kind=let_declaration, text=let condition1 = true;
Processing node: kind=let_declaration, text=let condition2 = true;
Processing node: kind=let_declaration, text=let condition3 = true;
Processing node: kind=let_declaration, text=let condition4 = false;
Processing node: kind=let_declaration, text=let condition6 = false;
Processing node: kind=let_declaration, text=let condition8 = false;
Processing node: kind=expression_statement, text=if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }
Processing node: kind=if_expression, text=if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }
push if
local_offset == 600, else_count = 12, else_if_count == 6
Processing node: kind=expression_statement, text=println!("statement1");
Processing node: kind=macro_invocation, text=println!("statement1")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
Processing node: kind=if_expression, text=if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
push if
local_offset == 500, else_count = 10, else_if_count == 5
Processing node: kind=expression_statement, text=println!("statement2");
Processing node: kind=macro_invocation, text=println!("statement2")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
Processing node: kind=if_expression, text=if condition3 {
                println!("statement3");
            } else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
push if
local_offset == 400, else_count = 8, else_if_count == 4
Processing node: kind=expression_statement, text=println!("statement3");
Processing node: kind=macro_invocation, text=println!("statement3")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 4
Handling If block at 1100:500
Processing node: kind=else_clause, text=else if condition4 {
                if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
            } else {
                println!("statement5");
            }
push if
local_offset == 400, else_count = 8, else_if_count == 4
mr penis
Processing node: kind=expression_statement, text=if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
Processing node: kind=if_expression, text=if condition1 {
                    println!("statement1");
                    if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
                } else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
push if
local_offset == 300, else_count = 6, else_if_count == 3
Processing node: kind=expression_statement, text=println!("statement1");
Processing node: kind=macro_invocation, text=println!("statement1")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
Processing node: kind=if_expression, text=if condition2 {
                        println!("statement2");
                        if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
                    } else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
push if
local_offset == 200, else_count = 4, else_if_count == 2
Processing node: kind=expression_statement, text=println!("statement2");
Processing node: kind=macro_invocation, text=println!("statement2")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
Processing node: kind=if_expression, text=if condition3 {
                            println!("statement3");
                        } else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
push if
local_offset == 100, else_count = 2, else_if_count == 1
Processing node: kind=expression_statement, text=println!("statement3");
Processing node: kind=macro_invocation, text=println!("statement3")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 8
Handling If block at 1600:1300
Processing node: kind=else_clause, text=else if condition4 {
                            println!("statement4");
                        } else {
                            println!("statement5");
                        }
push if
local_offset == 100, else_count = 2, else_if_count == 1
mr penis
Processing node: kind=expression_statement, text=println!("statement4");
Processing node: kind=macro_invocation, text=println!("statement4")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 9
pop else
Processing node: kind=else_clause, text=else {
                            println!("statement5");
                        }
mr penis
Processing node: kind=else, text=else
create else info block
Processing node: kind=block, text={
                            println!("statement5");
                        }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement5");
Processing node: kind=macro_invocation, text=println!("statement5")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 9
pop else
Processing node: kind=}, text=}
len of block mass = 8
Handling If block at 1700:1600
Processing node: kind=else_clause, text=else if condition6 {
                        println!("statement6");
                    } else {
                        println!("statement7");
                    }
push if
local_offset == 100, else_count = 2, else_if_count == 1
mr penis
Processing node: kind=expression_statement, text=println!("statement6");
Processing node: kind=macro_invocation, text=println!("statement6")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 9
pop else
Processing node: kind=else_clause, text=else {
                        println!("statement7");
                    }
mr penis
Processing node: kind=else, text=else
create else info block
Processing node: kind=block, text={
                        println!("statement7");
                    }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement7");
Processing node: kind=macro_invocation, text=println!("statement7")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 9
pop else
Processing node: kind=}, text=}
len of block mass = 8
Handling If block at 1500:1900
Processing node: kind=else_clause, text=else if condition8 {
                    println!("statement8");
                } else {
                    println!("statement9");
                }
push if
local_offset == 100, else_count = 2, else_if_count == 1
mr penis
Processing node: kind=expression_statement, text=println!("statement8");
Processing node: kind=macro_invocation, text=println!("statement8")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 9
pop else
Processing node: kind=else_clause, text=else {
                    println!("statement9");
                }
mr penis
Processing node: kind=else, text=else
create else info block
Processing node: kind=block, text={
                    println!("statement9");
                }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement9");
Processing node: kind=macro_invocation, text=println!("statement9")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 9
pop else
Processing node: kind=}, text=}
len of block mass = 8
Handling If block at 1200:2200
Processing node: kind=else_clause, text=else {
                println!("statement5");
            }
mr penis
Processing node: kind=else, text=else
create else info block
Processing node: kind=block, text={
                println!("statement5");
            }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement5");
Processing node: kind=macro_invocation, text=println!("statement5")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 8
pop else
Processing node: kind=}, text=}
len of block mass = 7
Handling If block at 1400:1100
Processing node: kind=else_clause, text=else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
push if
local_offset == 100, else_count = 2, else_if_count == 1
mr penis
Processing node: kind=expression_statement, text=println!("statement6");
Processing node: kind=macro_invocation, text=println!("statement6")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 8
pop else
Processing node: kind=else_clause, text=else {
            println!("statement7");
        }
mr penis
Processing node: kind=else, text=else
create else info block
Processing node: kind=block, text={
            println!("statement7");
        }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement7");
Processing node: kind=macro_invocation, text=println!("statement7")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 8
pop else
Processing node: kind=}, text=}
len of block mass = 7
Handling If block at 700:2600
Processing node: kind=else_clause, text=else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }
push if
local_offset == 100, else_count = 2, else_if_count == 1
mr penis
Processing node: kind=expression_statement, text=println!("statement8");
Processing node: kind=macro_invocation, text=println!("statement8")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 8
pop else
Processing node: kind=else_clause, text=else {
        println!("statement9");
    }
mr penis
Processing node: kind=else, text=else
create else info block
Processing node: kind=block, text={
        println!("statement9");
    }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement9");
Processing node: kind=macro_invocation, text=println!("statement9")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 8
pop else
Processing node: kind=expression_statement, text=return true;
Processing node: kind=return_expression, text=return true
push return
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 7
Handling If block at 100:2900
Processing node: kind=block_comment, text=/*fn main() -> i32 {
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        println!("{}", gg);
        break; // Добавлено для предотвращения бесконечного цикла
    }

    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }

    return 1;
}*/
coords: x=0; y=0
coords: x=0; y=100
coords: x=600; y=200
coords: x=600; y=300
coords: x=1100; y=400
coords: x=1100; y=500
coords: x=1500; y=600
coords: x=1500; y=700
coords: x=1100; y=800
coords: x=1100; y=900
coords: x=1400; y=1000
coords: x=1400; y=1100
coords: x=1600; y=1200
coords: x=1600; y=1300
coords: x=1700; y=1400
coords: x=1700; y=1500
coords: x=1600; y=1600
coords: x=1600; y=1700
coords: x=1600; y=1800
coords: x=1500; y=1900
coords: x=1500; y=1400
coords: x=1500; y=1500
coords: x=1500; y=1800
coords: x=1400; y=1900
coords: x=1400; y=2000
coords: x=1400; y=2100
coords: x=1200; y=2200
coords: x=1200; y=1200
coords: x=1200; y=1300
coords: x=1200; y=2100
coords: x=1100; y=2200
coords: x=1100; y=2300
coords: x=1100; y=2400
coords: x=800; y=2500
coords: x=800; y=1000
coords: x=800; y=1100
coords: x=800; y=2400
coords: x=700; y=2500
coords: x=700; y=600
coords: x=700; y=700
coords: x=700; y=2500
coords: x=600; y=2600
coords: x=600; y=2700
coords: x=600; y=2800
coords: x=100; y=2900
coords: x=100; y=400
coords: x=100; y=500
coords: x=100; y=2800
coords: x=0; y=2900
coords: x=0; y=3000
coords: x=0; y=3100
coords: x=-600; y=3200
coords: x=-600; y=200
coords: x=-600; y=300
coords: x=-600; y=3100
coords: x=-600; y=3200
