Processing node: kind=source_file, text=/*fn match_test() {
    while true {
        match gg {
            1 => println!("1"),
            2 => {
                println!("2");
                println!("2");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            4 => {
                println!("4");
                println!("4");
                println!("4");
                println!("4");
            }
            _ => println!("other"),
        }
    }
    println!("end");
}*/

fn decision_tree(value: i32) {
    if value < 2 {
        println!("Значение меньше 2.");
    } else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
}
/*
fn new_test() {
    if g11 {
        println!("g11")
    } else {
        println!("g2")
    }
}*/
/*
fn goyda() -> bool {
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
        } else {
            if condition1 {
                println!("statement1");
                if condition2 {
                    println!("statement2");
                } else {
                    println!("statement3");
                }
            } else if condition8 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        }
    } else if condition8 {
        println!("statement4");
    } else {
        println!("statement5");
    }

    return true;
}
*/
/*fn main() -> i32 {
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        if condition1 {
            println!("statement1");
            if condition2 {
                println!("statement6");
            } else {
                println!("statement7");
            }
        } else if condition8 {
            println!("statement8");
        } else {
            println!("statement9");
        }
        break; // Добавлено для предотвращения бесконечного цикла
    }

    return 1;
}
*/

Processing node: kind=block_comment, text=/*fn match_test() {
    while true {
        match gg {
            1 => println!("1"),
            2 => {
                println!("2");
                println!("2");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            3 => {
                println!("3");
                println!("3");
                println!("3");
            }
            4 => {
                println!("4");
                println!("4");
                println!("4");
                println!("4");
            }
            _ => println!("other"),
        }
    }
    println!("end");
}*/
Processing node: kind=function_item, text=fn decision_tree(value: i32) {
    if value < 2 {
        println!("Значение меньше 2.");
    } else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
}
Processing node: kind=fn, text=fn
Processing node: kind=identifier, text=decision_tree
push to blocks identifier
13
push fn
push local_block
LocalVecBlock { type: Start, text: "decision_tree", x: 0, y: 0 }

add block to y_offset == 0 x_offset = 0
Processing node: kind=parameters, text=(value: i32)
Processing node: kind=block, text={
    if value < 2 {
        println!("Значение меньше 2.");
    } else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
}
Processing node: kind={, text={
Processing node: kind=expression_statement, text=if value < 2 {
        println!("Значение меньше 2.");
    } else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
Processing node: kind=if_expression, text=if value < 2 {
        println!("Значение меньше 2.");
    } else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
push to blocks if_expression
local coords x:0; y:100
push if
text in if: if value < 2 {
        println!("Значение меньше 2.");
    } else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
local_offset == 600, else_count = 1, else_if_count == 5
push to if_else_stack. local x: 0; local y: 100; to x: -600
push local_block
LocalVecBlock { type: Condition, text: "if value < 2 ", x: 0, y: 100 }

Processing node: kind=expression_statement, text=println!("Значение меньше 2.");
Processing node: kind=macro_invocation, text=println!("Значение меньше 2.")
push to blocks macro
push local_block
LocalVecBlock { type: Print, text: "println!(\"Значение меньше 2.\")", x: 600, y: 200 }

add block to y_offset == 300 x_offset = 600
Processing node: kind=;, text=;
Processing node: kind=}, text=}
Some(If(0, 100, 600))
len of block mass = 2
Handling If block at 0:100
push local_block
LocalVecBlock { type: End, text: "end if", x: 600, y: 300 }

Processing node: kind=else_clause, text=else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
push to blocks else_clause
text in else_clause: else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
pop from if_else_stack. it contains [(-600, 100)]
after pop x: -600; y: 100
local coords x:-600; y:100
push if
text in if: else if value < 5 {
        println!("Значение от 2 до 5.");
    } else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
local_offset == 600, else_count = 1, else_if_count == 5
push to if_else_stack. local x: -600; local y: 100; to x: -1200
Processing node: kind=expression_statement, text=println!("Значение от 2 до 5.");
Processing node: kind=macro_invocation, text=println!("Значение от 2 до 5.")
push to blocks macro
push local_block
LocalVecBlock { type: Print, text: "println!(\"Значение от 2 до 5.\")", x: 0, y: 100 }

add block to y_offset == 200 x_offset = 0
Processing node: kind=;, text=;
Processing node: kind=}, text=}
Some(If(-600, 100, 600))
len of block mass = 2
Handling If block at -600:100
push local_block
LocalVecBlock { type: End, text: "end if", x: 0, y: 200 }

Processing node: kind=else_clause, text=else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
push to blocks else_clause
text in else_clause: else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
pop from if_else_stack. it contains [(-1200, 100)]
after pop x: -1200; y: 100
local coords x:-1200; y:100
push if
text in if: else if value < 10 {
        println!("Значение от 5 до 10.");
    } else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
local_offset == 500, else_count = 1, else_if_count == 4
push to if_else_stack. local x: -1200; local y: 100; to x: -1700
Processing node: kind=expression_statement, text=println!("Значение от 5 до 10.");
Processing node: kind=macro_invocation, text=println!("Значение от 5 до 10.")
push to blocks macro
push local_block
LocalVecBlock { type: Print, text: "println!(\"Значение от 5 до 10.\")", x: -700, y: 100 }

add block to y_offset == 200 x_offset = -700
Processing node: kind=;, text=;
Processing node: kind=}, text=}
Some(If(-1200, 100, 500))
len of block mass = 2
Handling If block at -1200:100
push local_block
LocalVecBlock { type: End, text: "end if", x: -700, y: 200 }

Processing node: kind=else_clause, text=else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
push to blocks else_clause
text in else_clause: else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
pop from if_else_stack. it contains [(-1700, 100)]
after pop x: -1700; y: 100
local coords x:-1700; y:100
push if
text in if: else if value < 15 {
        println!("Значение от 10 до 15.");
    } else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
local_offset == 400, else_count = 1, else_if_count == 3
push to if_else_stack. local x: -1700; local y: 100; to x: -2100
Processing node: kind=expression_statement, text=println!("Значение от 10 до 15.");
Processing node: kind=macro_invocation, text=println!("Значение от 10 до 15.")
push to blocks macro
push local_block
LocalVecBlock { type: Print, text: "println!(\"Значение от 10 до 15.\")", x: -1300, y: 100 }

add block to y_offset == 200 x_offset = -1300
Processing node: kind=;, text=;
Processing node: kind=}, text=}
Some(If(-1700, 100, 400))
len of block mass = 2
Handling If block at -1700:100
push local_block
LocalVecBlock { type: End, text: "end if", x: -1300, y: 200 }

Processing node: kind=else_clause, text=else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
push to blocks else_clause
text in else_clause: else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
pop from if_else_stack. it contains [(-2100, 100)]
after pop x: -2100; y: 100
local coords x:-2100; y:100
push if
text in if: else if value < 20 {
        println!("Значение от 15 до 20.");
    } else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
local_offset == 300, else_count = 1, else_if_count == 2
push to if_else_stack. local x: -2100; local y: 100; to x: -2400
it have 20
Processing node: kind=expression_statement, text=println!("Значение от 15 до 20.");
Processing node: kind=macro_invocation, text=println!("Значение от 15 до 20.")
push to blocks macro
push local_block
LocalVecBlock { type: Print, text: "println!(\"Значение от 15 до 20.\")", x: -1800, y: 100 }

add block to y_offset == 200 x_offset = -1800
Processing node: kind=;, text=;
Processing node: kind=}, text=}
Some(If(-2100, 100, 300))
len of block mass = 2
Handling If block at -2100:100
push local_block
LocalVecBlock { type: End, text: "end if", x: -1800, y: 200 }

Processing node: kind=else_clause, text=else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
push to blocks else_clause
text in else_clause: else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
pop from if_else_stack. it contains [(-2400, 100)]
after pop x: -2400; y: 100
local coords x:-2400; y:100
push if
text in if: else if value < 30 {
        println!("Значение от 20 до 30.");
    } else {
        println!("Значение 30 или больше.");
    }
local_offset == 200, else_count = 1, else_if_count == 1
push to if_else_stack. local x: -2400; local y: 100; to x: -2600
Processing node: kind=expression_statement, text=println!("Значение от 20 до 30.");
Processing node: kind=macro_invocation, text=println!("Значение от 20 до 30.")
push to blocks macro
push local_block
LocalVecBlock { type: Print, text: "println!(\"Значение от 20 до 30.\")", x: -2200, y: 100 }

add block to y_offset == 200 x_offset = -2200
Processing node: kind=;, text=;
Processing node: kind=}, text=}
Some(If(-2400, 100, 200))
len of block mass = 2
Handling If block at -2400:100
push local_block
LocalVecBlock { type: End, text: "end if", x: -2200, y: 200 }

Processing node: kind=else_clause, text=else {
        println!("Значение 30 или больше.");
    }
push to blocks else_clause
text in else_clause: else {
        println!("Значение 30 или больше.");
    }
pop from if_else_stack. it contains [(-2600, 100)]
after pop x: -2600; y: 100
mr penis
return to in vec x:-2600 y:100
local coords x-2600 y:100
Processing node: kind=else, text=else
push to blocks else
text in else_handler: else
create else info block
push local_block
LocalVecBlock { type: Else, text: "continue", x: -2600, y: 200 }

Processing node: kind=block, text={
        println!("Значение 30 или больше.");
    }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("Значение 30 или больше.");
Processing node: kind=macro_invocation, text=println!("Значение 30 или больше.")
push to blocks macro
push local_block
LocalVecBlock { type: Print, text: "println!(\"Значение 30 или больше.\")", x: -2600, y: 200 }

add block to y_offset == 300 x_offset = -2600
Processing node: kind=;, text=;
Processing node: kind=}, text=}
Some(Else(-2600, 100))
len of block mass = 2
pop else
push local_block
LocalVecBlock { type: End, text: "end else", x: -2600, y: 300 }

Processing node: kind=}, text=}
Some(Func)
len of block mass = 1
Handling Func block
push local_block
LocalVecBlock { type: End, text: "}", x: -2500, y: 400 }

Processing node: kind=block_comment, text=/*
fn new_test() {
    if g11 {
        println!("g11")
    } else {
        println!("g2")
    }
}*/
Processing node: kind=block_comment, text=/*
fn goyda() -> bool {
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
        } else {
            if condition1 {
                println!("statement1");
                if condition2 {
                    println!("statement2");
                } else {
                    println!("statement3");
                }
            } else if condition8 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        }
    } else if condition8 {
        println!("statement4");
    } else {
        println!("statement5");
    }

    return true;
}
*/
Processing node: kind=block_comment, text=/*fn main() -> i32 {
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        if condition1 {
            println!("statement1");
            if condition2 {
                println!("statement6");
            } else {
                println!("statement7");
            }
        } else if condition8 {
            println!("statement8");
        } else {
            println!("statement9");
        }
        break; // Добавлено для предотвращения бесконечного цикла
    }

    return 1;
}
*/
Final block vector: [
    LocalVecBlock {
        type: Start,
        text: "decision_tree",
        x: 0,
        y: 0,
    },
    LocalVecBlock {
        type: Condition,
        text: "if value < 2 ",
        x: 0,
        y: 100,
    },
    LocalVecBlock {
        type: Print,
        text: "println!(\"Значение меньше 2.\")",
        x: 600,
        y: 200,
    },
    LocalVecBlock {
        type: End,
        text: "end if",
        x: 600,
        y: 300,
    },
    LocalVecBlock {
        type: Print,
        text: "println!(\"Значение от 2 до 5.\")",
        x: 0,
        y: 100,
    },
    LocalVecBlock {
        type: End,
        text: "end if",
        x: 0,
        y: 200,
    },
    LocalVecBlock {
        type: Print,
        text: "println!(\"Значение от 5 до 10.\")",
        x: -700,
        y: 100,
    },
    LocalVecBlock {
        type: End,
        text: "end if",
        x: -700,
        y: 200,
    },
    LocalVecBlock {
        type: Print,
        text: "println!(\"Значение от 10 до 15.\")",
        x: -1300,
        y: 100,
    },
    LocalVecBlock {
        type: End,
        text: "end if",
        x: -1300,
        y: 200,
    },
    LocalVecBlock {
        type: Print,
        text: "println!(\"Значение от 15 до 20.\")",
        x: -1800,
        y: 100,
    },
    LocalVecBlock {
        type: End,
        text: "end if",
        x: -1800,
        y: 200,
    },
    LocalVecBlock {
        type: Print,
        text: "println!(\"Значение от 20 до 30.\")",
        x: -2200,
        y: 100,
    },
    LocalVecBlock {
        type: End,
        text: "end if",
        x: -2200,
        y: 200,
    },
    LocalVecBlock {
        type: Else,
        text: "continue",
        x: -2600,
        y: 200,
    },
    LocalVecBlock {
        type: Print,
        text: "println!(\"Значение 30 или больше.\")",
        x: -2600,
        y: 200,
    },
    LocalVecBlock {
        type: End,
        text: "end else",
        x: -2600,
        y: 300,
    },
    LocalVecBlock {
        type: End,
        text: "}",
        x: -2500,
        y: 400,
    },
]
thish block ready for processing LocalVecBlock { type: Start, text: "decision_tree", x: 0, y: 0 }
coords: x=0; y=0
thish block ready for processing LocalVecBlock { type: Condition, text: "if value < 2 ", x: 0, y: 100 }
coords: x=0; y=100
push iterator [1]
push look_for if value < 2 
thish block ready for processing LocalVecBlock { type: Print, text: "println!(\"Значение меньше 2.\")", x: 600, y: 200 }
coords: x=600; y=200
enter in check funk
after check [-10, 0]
thish block ready for processing LocalVecBlock { type: End, text: "end if", x: 600, y: 300 }
coords: x=600; y=300
pop look_for
thish block ready for processing LocalVecBlock { type: Print, text: "println!(\"Значение от 2 до 5.\")", x: 0, y: 100 }
coords: x=0; y=100
enter in check funk
after check [-10, 0]
thish block ready for processing LocalVecBlock { type: End, text: "end if", x: 0, y: 200 }
coords: x=0; y=200
pop look_for
