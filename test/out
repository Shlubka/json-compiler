Processing node: kind=source_file, text=fn goyda() -> bool {
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }

    true
}

fn main() -> i32 {
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        println!("{}", gg);
        break; // Добавлено для предотвращения бесконечного цикла
    }

    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }

    return 1;
}

Processing node: kind=function_item, text=fn goyda() -> bool {
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }

    true
}
Processing node: kind=fn, text=fn
Processing node: kind=identifier, text=goyda
5
push fn
Processing node: kind=parameters, text=()
Processing node: kind=->, text=->
Processing node: kind=primitive_type, text=bool
Processing node: kind=block, text={
    let condition1 = true;
    let condition2 = true;
    let condition3 = true;
    let condition4 = false;
    let condition6 = false;
    let condition8 = false;

    if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }

    true
}
Processing node: kind={, text={
Processing node: kind=let_declaration, text=let condition1 = true;
Processing node: kind=let_declaration, text=let condition2 = true;
Processing node: kind=let_declaration, text=let condition3 = true;
Processing node: kind=let_declaration, text=let condition4 = false;
Processing node: kind=let_declaration, text=let condition6 = false;
Processing node: kind=let_declaration, text=let condition8 = false;
Processing node: kind=expression_statement, text=if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }
Processing node: kind=if_expression, text=if condition1 {
        println!("statement1");
        if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
    } else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }
push if
local_offset == 300, else_count = 6, else_if_count == 3
Processing node: kind=expression_statement, text=println!("statement1");
Processing node: kind=macro_invocation, text=println!("statement1")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
Processing node: kind=if_expression, text=if condition2 {
            println!("statement2");
            if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
        } else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
push if
local_offset == 200, else_count = 4, else_if_count == 2
Processing node: kind=expression_statement, text=println!("statement2");
Processing node: kind=macro_invocation, text=println!("statement2")
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
Processing node: kind=if_expression, text=if condition3 {
                println!("statement3");
            } else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
push if
local_offset == 100, else_count = 2, else_if_count == 1
Processing node: kind=expression_statement, text=println!("statement3");
Processing node: kind=macro_invocation, text=println!("statement3")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 4
Handling If block at 500:500
Processing node: kind=else_clause, text=else if condition4 {
                println!("statement4");
            } else {
                println!("statement5");
            }
push if
local_offset == 100, else_count = 2, else_if_count == 1
mr penis
Processing node: kind=expression_statement, text=println!("statement4");
Processing node: kind=macro_invocation, text=println!("statement4")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
pop else
Processing node: kind=else_clause, text=else {
                println!("statement5");
            }
mr penis
Processing node: kind=else, text=else
Processing node: kind=block, text={
                println!("statement5");
            }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement5");
Processing node: kind=macro_invocation, text=println!("statement5")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
pop else
Processing node: kind=}, text=}
len of block mass = 4
Handling If block at 600:800
Processing node: kind=else_clause, text=else if condition6 {
            println!("statement6");
        } else {
            println!("statement7");
        }
push if
local_offset == 100, else_count = 2, else_if_count == 1
mr penis
Processing node: kind=expression_statement, text=println!("statement6");
Processing node: kind=macro_invocation, text=println!("statement6")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
pop else
Processing node: kind=else_clause, text=else {
            println!("statement7");
        }
mr penis
Processing node: kind=else, text=else
Processing node: kind=block, text={
            println!("statement7");
        }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement7");
Processing node: kind=macro_invocation, text=println!("statement7")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
pop else
Processing node: kind=}, text=}
len of block mass = 4
Handling If block at 400:1100
Processing node: kind=else_clause, text=else if condition8 {
        println!("statement8");
    } else {
        println!("statement9");
    }
push if
local_offset == 100, else_count = 2, else_if_count == 1
mr penis
Processing node: kind=expression_statement, text=println!("statement8");
Processing node: kind=macro_invocation, text=println!("statement8")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
pop else
Processing node: kind=else_clause, text=else {
        println!("statement9");
    }
mr penis
Processing node: kind=else, text=else
Processing node: kind=block, text={
        println!("statement9");
    }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=println!("statement9");
Processing node: kind=macro_invocation, text=println!("statement9")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
pop else
Processing node: kind=boolean_literal, text=true
Processing node: kind=true, text=true
Processing node: kind=}, text=}
len of block mass = 4
Handling If block at 100:1400
Processing node: kind=function_item, text=fn main() -> i32 {
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        println!("{}", gg);
        break; // Добавлено для предотвращения бесконечного цикла
    }

    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }

    return 1;
}
Processing node: kind=fn, text=fn
Processing node: kind=identifier, text=main
4
push fn
Processing node: kind=parameters, text=()
Processing node: kind=->, text=->
Processing node: kind=primitive_type, text=i32
Processing node: kind=block, text={
    let gg = 0;

    for i in 1..10 {
        println!("all ok");
    }

    loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }

    while gg < 10 {
        println!("{}", gg);
        break; // Добавлено для предотвращения бесконечного цикла
    }

    match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }

    return 1;
}
Processing node: kind={, text={
Processing node: kind=let_declaration, text=let gg = 0;
Processing node: kind=expression_statement, text=for i in 1..10 {
        println!("all ok");
    }
Processing node: kind=for_expression, text=for i in 1..10 {
        println!("all ok");
    }
push for
Processing node: kind=expression_statement, text=println!("all ok");
Processing node: kind=macro_invocation, text=println!("all ok")
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 5
Handling For block at -300:2000
Processing node: kind=expression_statement, text=loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }
Processing node: kind=loop_expression, text=loop {
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }
Processing node: kind=loop, text=loop
push loop
Processing node: kind=block, text={
        goyda();
        break; // Добавлено для предотвращения бесконечного цикла
    }
Processing node: kind={, text={
Processing node: kind=expression_statement, text=goyda();
Processing node: kind=call_expression, text=goyda()
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=break;
Processing node: kind=break_expression, text=break
Processing node: kind=break, text=break
Processing node: kind=;, text=;
Processing node: kind=line_comment, text=// Добавлено для предотвращения бесконечного цикла
Processing node: kind=}, text=}
len of block mass = 5
Handling Loop block at -300:2300
Processing node: kind=expression_statement, text=while gg < 10 {
        println!("{}", gg);
        break; // Добавлено для предотвращения бесконечного цикла
    }
Processing node: kind=while_expression, text=while gg < 10 {
        println!("{}", gg);
        break; // Добавлено для предотвращения бесконечного цикла
    }
Processing node: kind=expression_statement, text=println!("{}", gg);
Processing node: kind=macro_invocation, text=println!("{}", gg)
Processing node: kind=;, text=;
Processing node: kind=expression_statement, text=break;
Processing node: kind=break_expression, text=break
Processing node: kind=break, text=break
Processing node: kind=;, text=;
Processing node: kind=line_comment, text=// Добавлено для предотвращения бесконечного цикла
Processing node: kind=}, text=}
len of block mass = 5
Handling While block at -300:2800
Processing node: kind=expression_statement, text=match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }
Processing node: kind=match_expression, text=match gg {
        1 => println!("1"),
        2 => println!("2"),
        3 => println!("3"),
        4 => println!("4"),
        5 => println!("5"),
        _ => println!("other"),
    }
push match
Processing node: kind=expression_statement, text=return 1;
Processing node: kind=return_expression, text=return 1
push return
Processing node: kind=;, text=;
Processing node: kind=}, text=}
len of block mass = 4
skip
coords: x=0; y=0
coords: x=0; y=100
coords: x=300; y=200
coords: x=300; y=300
coords: x=500; y=400
coords: x=500; y=500
coords: x=600; y=600
coords: x=600; y=700
index stack is empty
log 400
coords: x=500; y=800
coords: x=500; y=900
coords: x=500; y=1000
coords: x=400; y=1000
coords: x=400; y=600
coords: x=400; y=700
coords: x=400; y=1000
index stack is empty
log 400
coords: x=300; y=1100
coords: x=300; y=1200
coords: x=300; y=1300
coords: x=100; y=1300
coords: x=100; y=400
coords: x=100; y=500
coords: x=100; y=1300
index stack is empty
log 400
coords: x=0; y=1400
coords: x=0; y=1500
coords: x=0; y=1600
coords: x=-300; y=1600
coords: x=-300; y=200
coords: x=-300; y=300
coords: x=-300; y=1600
coords: x=-300; y=1700
coords: x=-300; y=1800
index stack is empty
log 400
coords: x=-300; y=1900
coords: x=-300; y=2000
coords: x=-300; y=2100
coords: x=-300; y=2200
index: 32
log 400
coords: x=-300; y=2300
coords: x=-300; y=2400
coords: x=-300; y=2500
coords: x=-300; y=2600
coords: x=-300; y=2700
index: 35
log 400
coords: x=-300; y=2800
coords: x=-300; y=2900
coords: x=-300; y=3000
coords: x=-300; y=3100
coords: x=-300; y=3200
index: 40
log 400
coords: x=-300; y=3300
coords: x=-300; y=3400
coords: x=-300; y=3500
